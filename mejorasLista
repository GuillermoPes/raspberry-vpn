# Limpiar Docker completamente
sudo docker stop $(sudo docker ps -aq) 2>/dev/null
sudo docker rm $(sudo docker ps -aq) 2>/dev/null
sudo docker system prune -af --volumes

# Verificar estado de systemd-resolved
sudo systemctl status systemd-resolved


En lugar de dejarle al usuario una tarea
  manual post-instalación, la integramos directamente en el script. Es la diferencia entre dar un coche con el asiento
  del conductor sin montar y darlo listo para conducir.

  Sí, se puede hacer, y es una mejora fantástica.


  No es trivial, porque implica interactuar con la API de Nginx Proxy Manager (NPM) desde un script de Bash, pero es
  totalmente factible.

  El Plan de Acción

  Aquí tienes cómo lo haríamos, paso a paso:


   1. Modificar `setup.sh`:
       * Añadir una pregunta: En la fase de collect_user_input, añadiremos una nueva función para pedir el correo
         electrónico del usuario. Lo guardaremos en una variable (ej: USER_EMAIL).
       * Esperar a NPM: Después de docker-compose up -d, el script esperará en un bucle hasta que la API de NPM esté
         disponible (por ejemplo, haciendo curl a http://localhost:81/api/ hasta que responda).
       * Lanzar el configurador: Una vez que NPM esté listo, setup.sh ejecutará un nuevo script que crearemos, llamado
         configure_npm.sh.


   2. Crear el Script `configure_npm.sh`:
       * Este script será el cerebro de la operación. Usará curl para hablar con la API de NPM.
       * Paso 1: Obtener Token: Hará una petición a la API con las credenciales por defecto (admin@example.com /
         changeme) para obtener un token de autenticación.
       * Paso 2: Cambiar Credenciales: Inmediatamente, usará ese token para cambiar el email del administrador al
         USER_EMAIL que proporcionaste y establecerá una contraseña segura (que guardaremos en un archivo en
         /opt/vpn-server/npm_password.txt).
       * Paso 3: Crear los "Proxy Hosts": Hará una petición a la API por cada servicio (Pi-hole, Portainer) para crear
         las rutas, apuntando pihole.vpn.local a 10.13.13.100:80, etc.


   3. El Desafío del SSL (y la Solución Inteligente):
       * El Problema: No podemos usar Let's Encrypt para generar certificados para dominios falsos como .local, porque
         Let's Encrypt necesita verificar que eres el dueño del dominio desde internet.
       * La Solución: El script le pedirá a la API de NPM que genere un certificado autofirmado (Self-Signed
         Certificate).
       * El Resultado: Tendrás HTTPS y una conexión cifrada. La única "pega" es que la primera vez que accedas a
         https://pihole.vpn.local desde un navegador, te mostrará una advertencia de seguridad ("La conexión no es
         privada"). Simplemente le das a "Avanzado" -> "Acceder al sitio (no seguro)" y ya no te volverá a molestar en
         ese dispositivo. Es un pequeño precio a pagar por una automatización completa y seguridad dentro de tu VPN.


   4. Modificar la Salida Final:
       * La función show_final_info en setup.sh se modificará para mostrar las nuevas y bonitas URLs
         (https://pihole.vpn.local, https://portainer.vpn.local) en lugar de las antiguas con IP y puerto.

  Resumen del Resultado Final


  Al terminar la instalación, obtendrás:
   * URLs limpias y seguras para todos tus servicios.
   * HTTPS activado en todas ellas.
   * La contraseña de NPM guardada de forma segura.
   * Cero configuración manual requerida.


  Este es un cambio significativo que hará tu proyecto inmensamente más profesional y fácil de usar.



 Ahora, sobre tu pregunta de añadir un sistema de notificaciones por email para informes periódicos y alertas:

  No es excesivamente complicado, pero sí añade una capa de complejidad y requiere algunas decisiones de diseño.


  Aquí te explico los componentes necesarios y la complejidad:

  Componentes Necesarios para un Sistema de Notificaciones por Email


   1. Servidor SMTP (Simple Mail Transfer Protocol):
       * Necesitas un servidor que envíe los emails.
       * Opciones:
           * Usar un servicio de terceros: Gmail (requiere configuración de "contraseñas de aplicación"), SendGrid, Mailgun, etc. Es lo
             más sencillo y fiable, pero puede requerir una cuenta y configuración específica.
           * Montar tu propio servidor SMTP: Muy complejo y no recomendado para un entorno doméstico, ya que es muy probable que tus
             emails terminen en la carpeta de spam.


   2. Cliente de Email / Herramienta de Envío:
       * Necesitas un programa o script que se conecte al servidor SMTP y envíe el email.
       * Opciones:
           * Comandos de Linux: mail, sendmail, ssmtp. Requieren configuración en el sistema operativo.
           * Scripts Python/Node.js: Usar librerías específicas para enviar emails. Esto implicaría añadir un nuevo contenedor o instalar
             Python/Node.js en el host.


   3. Lógica de Alerta/Informe:
       * ¿Qué monitorear? Uso de CPU/RAM, espacio en disco, temperatura, estado de los contenedores (usando los healthchecks que ya
         tienes), logs de errores específicos.
       * ¿Cuándo alertar? Cuando un valor supera un umbral (ej. CPU > 80%), cuando un contenedor pasa a unhealthy, cuando un servicio no
         se inicia.
       * ¿Qué informar? Un resumen diario/semanal del estado del sistema.


   4. Programador de Tareas (Cron):
       * Para los informes periódicos, necesitarías configurar tareas cron en la Raspberry Pi que ejecuten el script de envío de email a
         intervalos definidos (diario, semanal).

  Complejidad y Consideraciones


   * Configuración SMTP: Esta es la parte más "delicada". Cada proveedor de email tiene sus propias reglas (puertos, cifrado,
     autenticación). Si usas Gmail, necesitarás generar una "contraseña de aplicación" en tu cuenta de Google, ya que las contraseñas
     normales no suelen funcionar por seguridad.
   * Seguridad de Credenciales: ¿Dónde almacenar la contraseña del email? No querrás hardcodearla en un script. Podrías usar variables de
     entorno o un archivo de configuración protegido.
   * Contenido del Email: Generar un email legible y útil (formato, qué información incluir).
   * Manejo de Errores: ¿Qué pasa si el email no se envía? ¿Cómo lo registras?
   * Dependencias: Si usas un script Python, necesitarás Python y las librerías necesarias. Si usas comandos de Linux, asegúrate de que
     estén instalados y configurados.


  ¿Es muy complicado?


   * Para un informe básico: No mucho. Un script sencillo con ssmtp y un cron para enviar un resumen de docker ps y free -h es bastante
     manejable.
   * Para alertas en tiempo real: Más complejo. Implicaría que tus scripts de monitoreo (o los healthchecks de Docker) puedan disparar el
     envío de un email inmediatamente cuando detecten un problema. Esto podría requerir un pequeño servicio que esté constantemente
     monitoreando o que reaccione a eventos de Docker.


  Propuesta para Implementarlo (En Fases)


   1. Fase 1: Envío Básico de Email (Prueba de Concepto)
       * Instalar y configurar ssmtp en la Raspberry Pi para que pueda enviar emails a través de tu cuenta de Gmail/Outlook.
       * Crear un script simple (send_email.sh) que tome un asunto y un cuerpo, y lo envíe.


   2. Fase 2: Informe Periódico Básico
       * Crear un script (daily_report.sh) que recopile información básica (estado de docker ps, uso de CPU/RAM) y la formatee en un
         email.
       * Configurar una tarea cron para ejecutar daily_report.sh una vez al día.


   3. Fase 3: Alertas de Estado de Contenedores
  Sí, es totalmente factible. Si te parece bien, podemos empezar por la Fase 1 para que tengas una base de envío de emails y luego ir

> claro, pero si le pongo las credenciales de smtp cualqaiera que se meta en el repo de git va a tenerlas y es un fastidio no?

✦ ¡Absolutamente! Tienes toda la razón. Poner las credenciales de SMTP directamente en el repositorio de Git sería un riesgo de seguridad
  enorme y completamente inaceptable. Cualquiera que clonara el repositorio tendría acceso a tu cuenta de correo, lo cual es un desastre
  potencial.

  La solución es la misma que ya estamos usando para la contraseña de Pi-hole: variables de entorno y el archivo `.env`.


  Así es como lo haríamos de forma segura:


   1. Añadir las credenciales al archivo `.env`:
       * El archivo .env (que se genera automáticamente por setup.sh y que ya está en tu .gitignore) es el lugar perfecto para almacenar
         información sensible.
       * Añadiríamos líneas como estas a tu .env:


   1         # Configuración de Email para Notificaciones
   2         SMTP_SERVER=smtp.gmail.com
   3         SMTP_PORT=587
   4         SMTP_USERNAME=tu_email@gmail.com
   5         SMTP_PASSWORD=tu_contraseña_de_aplicacion_o_normal
   6         NOTIFICATION_RECIPIENT=tu_email_destino@example.com

       * Importante: La SMTP_PASSWORD para servicios como Gmail no debe ser tu contraseña normal de Gmail. Debes generar una "contraseña
         de aplicación" específica para esto en la configuración de seguridad de tu cuenta de Google. Esto es una capa de seguridad
         adicional.


   2. El script de envío de email leería estas variables:
       * Cuando creamos el script para enviar emails, este no tendría las credenciales hardcodeadas. En su lugar, leería los valores de
         las variables de entorno SMTP_SERVER, SMTP_USERNAME, etc.
       * Por ejemplo, si usáramos ssmtp, su archivo de configuración (/etc/ssmtp/ssmtp.conf) podría hacer referencia a estas variables o
         ser generado dinámicamente por el script de instalación.

  Ventajas de este enfoque:


   * Seguridad: Las credenciales nunca están en el repositorio público de Git.
   * Flexibilidad: Puedes cambiar las credenciales fácilmente editando solo el archivo .env en tu Raspberry Pi, sin tocar el código del
     script.
   * Consistencia: Sigue el mismo patrón que ya usamos para la contraseña de Pi-hole y otras configuraciones.


  Así que sí, tu preocupación es muy válida y la abordaremos de la manera más segura posible.